// 라이브러리 버전 명시
buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    // asciidoctor
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    // QueryDSL
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.devnity'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Basic
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // H2
    runtimeOnly 'com.h2database:h2'

    // MySQL
    runtimeOnly 'mysql:mysql-connector-java'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Jwt
    implementation 'com.auth0:java-jwt:3.18.2'

    // RestDocs mockmvc
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // QueryDSL
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // Spring Cloud AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'
}

test {
    useJUnitPlatform()
}
// ---------------------------- ( 기타 ) ----------------------------

// 빌드시 *-plain.jar 생성하지 않기
jar {
    enabled = false
}

// ---------------------------- ( adoc 생성 ) ----------------------------

// snippets 생성될 경로 변수 생성
ext {
    set('snippetsDir', file("build/generated-snippets"))
}

// 테스트시에 해당 경로로 결과물 output
test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

// .adoc 실행 태스크
asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

// ---------------------------- ( adoc -> html 변환 ) ----------------------------

// bootJar 생성시 static/docs/*.html을 반영
bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}"){
        into('BOOT-INF/classes/static/docs')
    }
}

// ---------------------------- ( QueryDSL ) ----------------------------

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl.doFirst {
    if(file(querydslDir).exists() )
        delete(file(querydslDir))
}

// ---------------------------- ( Build ) ----------------------------

build {

}