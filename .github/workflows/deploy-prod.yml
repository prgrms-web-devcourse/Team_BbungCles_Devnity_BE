# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Deploy Devnity-API to Production Server

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Gradle
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      # Docker
      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ secrets.DOCKER_TAG_PROD }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ secrets.DOCKER_TAG_PROD }}

      # docker-compose - .env 파일 생성
      - name: Create .env file
        uses: SpicyPizza/create-envfile@v1.2
        with:
          envkey_DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          envkey_DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}
          envkey_DOCKER_TAG_PROD: ${{ secrets.DOCKER_TAG_PROD }}
          directory: ./deploy/prod
          file_name: .env
      # docker-compose - spring.env 파일 생성
      - name: Create spring.env file
        uses: SpicyPizza/create-envfile@v1.2
        with:
          envkey_DB_URL_PROD: ${{ secrets.DB_URL_PROD }}
          envkey_DB_USERNAME: ${{ secrets.DB_USERNAME }}
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_AWS_S3_ACCESS_KEY: ${{ secrets.AWS_S3_ACCESS_KEY }}
          envkey_AWS_S3_SECRET_KEY: ${{ secrets.AWS_S3_SECRET_KEY }}
          envkey_AWS_CLOUDFRONT_URL: ${{ secrets.AWS_CLOUDFRONT_URL }}
          envkey_JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          envkey_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          envkey_SLACK_URL_ALARM_PROD: ${{ secrets.SLACK_URL_ALARM_PROD }}
          directory: ./deploy/prod
          file_name: spring.env

      # EC2로 쉘 스크립트 전송
      - name: Send scripts to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          source: "./deploy/prod/*"
          target: "/srv/deploy"
          strip_components: 1

      # EC2에서 docker-compose 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          port: ${{ secrets.AWS_EC2_PORT }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            cd /srv/deploy/prod
            bash deploy.sh \
            ${{ secrets.DOCKER_USERNAME }} \
            ${{ secrets.DOCKER_REPOSITORY }} \
            ${{ secrets.DOCKER_TAG_PROD }}

      # ci/cd 결과 슬랙 전송
      - name: Send result to slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{job.status}}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL_CICD }}